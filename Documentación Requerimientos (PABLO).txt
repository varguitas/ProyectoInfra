Se parte a de dos primitivas:
	-Send (destino, mensaje)
	-Receive (origen, mensaje)

SINCORNIZACIÓN:
	1.Send
		a. Bloqueante: Se bloquea hasta que el proceso destino reciba el mensaje
		b. No bloqueante: No se bloquea y puede seguir realizando tareas con normalidad.

	2. Receive: Para esta primitiva tenemos que tener en cuenta dos opciones:
		a. Si el mensaje fue enviado previamente será recibido y la ejecución continua normalmente.
		b. Si no hay mensajes esperando entonces hay dos opciones más.
			b.1. El proceso se bloquea hasta que se reciba el mensaje.
			b.2. El proceso continua ejecutando y abandona el intento de recepción.

	TRES DE LAS COMBINACIONES MÁS TÍPICAS:
	1. Envío bloqueante, recepción bloqueante: Ambos emisor y receptor se bloquean hasta que el mensaje se entrega, conocido 		también como rendezvous.
	2. Envío no bloqueante, recepción bloqueante: Aunque el emisor puede continuar, el receptor se bloqueará hasta que el 	mensaje solicitado llegue. Probablemente la combinación más útil (Colocarla por default).
	3. Envío no bloqueante, recepción no bloqueante: Ninguna de las dos partes debe esperar nada, se envía y se recibe cuando 	se desea recibir. (Problemas cuando es comunicación de procesos por red).

DIRECCIONAMIENTO: 
	1. Directo: Incluye especificamente el identificador del proceso al que desea enviar el mensaje.
		PRIMITIVA RECEIVE
		a. Explícito: Se especifica explicitamente el origen 
		b. Implícito: En este caso el parámetro origen del receive no debería de especificarse, ya que puede recibir mensajes de cualquier proceso que le haya enviado uno, es como el caso de un servidor de impresión, que acepta mensajes de solicitud de impresión de cualquier proceso quo computadora que se lo envía (podria decirse que lo que se debe hacer es guardarlo en una cola y sin especificar emisores se haga la recepción de los mensajes que están en cola.
	
	2. Indirecto: Se envía el mensaje a una cola de buzón por el send y a la hora de hacer receive, se toma el mensaje de la cola apropiada.
	En este caso se dan las siguiente relaciones:

	- Uno a Uno: Un proceso transmite a otro por medio del puerto.
	- Muchos a Uno: Muchos procesos envían a un puerto donde solo uno recibe.
	- Uno a Muchos: Un proceso envía a un puerto donde muchos reciben.
	- Muchos a Muchos: Muchos procesos envían a un buzón donde muchos más reciben.

		a. Estático: Se crea el buzón (conocido como puerto) asociando el proceso que recibirá de el permanentemente. Una relación de uno a uno se enomina estática, cuando se asocia el puerto al proceso receptor se tiene la posibilidad de que al eliminar el proceso se elimine también el puerto asignado.
		b. Dinámico: Cuando hay varios procesos emisores a un mismo puerto, esta asociación se hace de forma dinámica. Para esto se pueden utilizar primitivas como connect y disconnect. En este caso los puertos son creados por un servicio que lo permita, en el caso que se quiera eliminar este puerto se debe hacer desde el servicio de forma explícita.
	 
	
	